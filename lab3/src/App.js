import React, { useState } from 'react';
import { Routes, Route, useNavigate, useLocation } from 'react-router-dom';
import './App.css';
import CityMap from './components/CityMap';
import Construction from './components/Construction';
import Resources from './components/Resources';
import Welcome from './components/Welcome';

// Building images for different levels
const buildingImages = {
  '–ñ–∏—Ç–ª–æ–≤–∏–π –∫–æ–º–ø–ª–µ–∫—Å': [
    '/images/house.jpg',
    '/images/house-improved.jpg'
  ],
  '–û—Ñ—ñ—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä': [
    '/images/office.jpg',
    '/images/office-improved.jpg'
  ],
  '–õ—ñ–∫–∞—Ä–Ω—è': [
    '/images/hospital.jpg',
    '/images/hospital-improved.jpg'
  ],
  '–®–∫–æ–ª–∞': [
    '/images/school.jpg',
    '/images/school-improved.jpg'
  ],
  '–ü–∞—Ä–∫': [
    '/images/park.jpg',
    '/images/park-improved.jpg'
  ],
  '–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å': [
    '/images/sport.jpg',
    '/images/sport-improved.jpg'
  ],
  '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –≤—É–∑–æ–ª': [
    '/images/busStop.jpg',
    '/images/busStop-improved.jpg'
  ],
  '–Ü–Ω–¥—É—Å—Ç—Ä—ñ–∞–ª—å–Ω–∞ –∑–æ–Ω–∞': [
    '/images/build.jpg',
    '/images/build-improved.jpg'
  ]
};

function App() {
  const navigate = useNavigate();
  const location = useLocation();
  const [cityData, setCityData] = useState({
    buildings: [],
    budget: 100000000,
    materials: 50000,
    workers: 10000
  });

  const buildingTypes = [
    {
      name: '–ñ–∏—Ç–ª–æ–≤–∏–π –∫–æ–º–ø–ª–µ–∫—Å',
      image: '/images/house.jpg',
      cost: 500000,
      workers: 200,
      resources: 200,
      level: 1,
      satisfaction: 15,
      description: '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–µ –∂–∏—Ç–ª–æ –ø—ñ–¥–≤–∏—â—É—î –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å –∂–∏—Ç–µ–ª—ñ–≤'
    },
    {
      name: '–û—Ñ—ñ—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä',
      image: '/images/office.jpg',
      cost: 1000000,
      workers: 250,
      resources: 250,
      level: 1,
      satisfaction: 10,
      description: '–°—Ç–≤–æ—Ä—é—î —Ä–æ–±–æ—á—ñ –º—ñ—Å—Ü—è —Ç–∞ —Ä–æ–∑–≤–∏–≤–∞—î —ñ–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É'
    },
    {
      name: '–õ—ñ–∫–∞—Ä–Ω—è',
      image: '/images/hospital.jpg',
      cost: 800000,
      workers: 300,
      resources: 300,
      level: 1,
      satisfaction: 25,
      description: '–ó–Ω–∞—á–Ω–æ –ø–æ–∫—Ä–∞—â—É—î —è–∫—ñ—Å—Ç—å –∂–∏—Ç—Ç—è —Ç–∞ –∑–¥–æ—Ä–æ–≤\'—è –∂–∏—Ç–µ–ª—ñ–≤'
    },
    {
      name: '–®–∫–æ–ª–∞',
      image: '/images/school.jpg',
      cost: 400000,
      workers: 150,
      resources: 150,
      level: 1,
      satisfaction: 20,
      description: '–ó–∞–±–µ–∑–ø–µ—á—É—î –æ—Å–≤—ñ—Ç—É —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –º–æ–ª–æ–¥—ñ'
    },
    {
      name: '–ü–∞—Ä–∫',
      image: '/images/park.jpg',
      cost: 100000,
      workers: 100,
      resources: 100,
      level: 1,
      satisfaction: 30,
      description: '–ú—ñ—Å—Ü–µ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É —Ç–∞ –¥–æ–∑–≤—ñ–ª–ª—è, –∑–Ω–∞—á–Ω–æ –ø—ñ–¥–≤–∏—â—É—î –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å'
    },
    {
      name: '–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å',
      image: '/images/sport.jpg',
      cost: 600000,
      workers: 150,
      resources: 200,
      level: 1,
      satisfaction: 20,
      description: '–°–ø—Ä–∏—è—î –∑–¥–æ—Ä–æ–≤–æ–º—É —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ–º—É –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É'
    },
    {
      name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –≤—É–∑–æ–ª',
      image: '/images/busStop.jpg',
      cost: 1000000,
      workers: 300,
      resources: 300,
      level: 1,
      satisfaction: 15,
      description: '–ü–æ–∫—Ä–∞—â—É—î –º–æ–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º—ñ—Å—Ç–∞'
    },
    {
      name: '–Ü–Ω–¥—É—Å—Ç—Ä—ñ–∞–ª—å–Ω–∞ –∑–æ–Ω–∞',
      image: '/images/build.png',
      cost: 1500000,
      workers: 400,
      resources: 500,
      level: 1,
      satisfaction: -50,
      description: '–°—Ç–≤–æ—Ä—é—î –±–∞–≥–∞—Ç–æ —Ä–æ–±–æ—á–∏—Ö –º—ñ—Å—Ü—å, –∞–ª–µ –∑–Ω–∞—á–Ω–æ –∑–Ω–∏–∂—É—î –∑–∞–¥–æ–≤–æ–ª–µ–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è —Ç–∞ —à—É–º'
    }
  ];

  const calculateUpgradeCost = (building) => {
    if (!building) return null;
    return {
      resources: Math.floor(building.resources * 0.5),
      workers: Math.floor(building.workers * 0.3),
      budget: Math.floor(building.resources * 1000)
    };
  };

  const handleBuild = (building) => {
    if (!building) return;

    const resourceCost = Math.floor(building.resources * 0.3);
    const workersCost = Math.floor(building.workers * 0.2);

    if (
      cityData.budget >= building.cost &&
      cityData.materials >= resourceCost &&
      cityData.workers >= workersCost
    ) {
      setCityData(prev => ({
        ...prev,
        buildings: [...prev.buildings, {
          ...building,
          id: Date.now(),
          constructionDate: new Date().toISOString(),
          level: 1,
          maxLevel: 2,
          income: Math.floor(building.cost * 0.1),
          satisfaction: building.satisfaction,
          description: building.description,
          upgradeCost: building.cost * 0.5,
          upgradeMaterialCost: building.resources * 0.5,
          image: buildingImages[building.name][0]
        }],
        budget: prev.budget - building.cost,
        materials: prev.materials - resourceCost,
        workers: prev.workers - workersCost
      }));

      navigate('/city');
    } else {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Å—É—Ä—Å—ñ–≤ –¥–ª—è –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–∞!');
    }
  };

  const handleUpgrade = (buildingId) => {
    const buildingIndex = cityData.buildings.findIndex(b => b.id === buildingId);
    const building = cityData.buildings[buildingIndex];
    
    if (buildingIndex === -1 || !building) {
      alert('–ü–æ–º–∏–ª–∫–∞: –±—É–¥—ñ–≤–ª—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!');
      return;
    }

    if (building.level >= 2) {
      alert('–ë—É–¥—ñ–≤–ª—è –≤–∂–µ –º–∞—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å!');
      return;
    }

    const nextLevel = building.level + 1;
    
    const upgradeCost = {
      resources: building.upgradeMaterialCost || 50,
      workers: 50,
      budget: building.upgradeCost || 50000
    };

    if (
      cityData.materials >= upgradeCost.resources &&
      cityData.workers >= upgradeCost.workers &&
      cityData.budget >= upgradeCost.budget
    ) {
      setCityData(prev => {
        const updatedBuildings = [...prev.buildings];
        
        updatedBuildings[buildingIndex] = {
          ...building,
          level: nextLevel,
          image: buildingImages[building.name][nextLevel - 1],
          resources: Math.floor(building.resources * 1.2),
          workers: Math.floor(building.workers * 1.2),
          income: Math.floor(building.income * 1.5),
          satisfaction: Math.floor(building.satisfaction * 1.2),
          upgradeCost: Math.floor(building.upgradeCost * 1.5),
          upgradeMaterialCost: Math.floor(building.upgradeMaterialCost * 1.3)
        };

        return {
          ...prev,
          buildings: updatedBuildings,
          materials: prev.materials - upgradeCost.resources,
          workers: prev.workers - upgradeCost.workers,
          budget: prev.budget - upgradeCost.budget
        };
      });
    } else {
      alert(
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ä–µ—Å—É—Ä—Å—ñ–≤ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –±—É–¥—ñ–≤–ª—ñ!\n\n' +
        '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ:\n' +
        '- –†–µ—Å—É—Ä—Å—ñ–≤: ' + upgradeCost.resources + ' (–º–∞—î—Ç–µ: ' + cityData.materials + ')\n' +
        '- –†–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤: ' + upgradeCost.workers + ' (–º–∞—î—Ç–µ: ' + cityData.workers + ')\n' +
        '- –ë—é–¥–∂–µ—Ç—É: ' + upgradeCost.budget + ' (–º–∞—î—Ç–µ: ' + cityData.budget + ')'
      );
    }
  };

  const getActiveTab = () => {
    switch (location.pathname) {
      case '/city':
        return 'city';
      case '/construction':
        return 'construction';
      case '/resources':
        return 'resources';
      default:
        return 'welcome';
    }
  };

  return (
    <div className="app">
      <header className="app-header">
        <div className="header-left">
          <h1 onClick={() => navigate('/')} style={{ cursor: 'pointer' }}>
            City Control Simulator
          </h1>
        </div>
        
        <div className="header-right">
          <nav className="nav-tabs">
            <button 
              className={getActiveTab() === 'city' ? 'active' : ''} 
              onClick={() => navigate('/city')}
            >
              üèôÔ∏è –ú–æ—î –º—ñ—Å—Ç–æ
            </button>
            <button 
              className={getActiveTab() === 'construction' ? 'active' : ''} 
              onClick={() => navigate('/construction')}
            >
              üèóÔ∏è –ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ
            </button>
            <button 
              className={getActiveTab() === 'resources' ? 'active' : ''} 
              onClick={() => navigate('/resources')}
            >
              üí∞ –†–µ—Å—É—Ä—Å–∏ –º—ñ—Å—Ç–∞
            </button>
          </nav>

          <div className="user-profile">
            <button className="profile-button">
              üë§
            </button>
            <div className="profile-dropdown">
              <button className="logout-button">
                –í–∏–π—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç—É
              </button>
            </div>
          </div>
        </div>
      </header>

      <main className="app-content">
        <Routes>
          <Route path="/" element={<Welcome />} />
          <Route 
            path="/city" 
            element={
              <CityMap 
                buildings={cityData.buildings} 
                onUpgrade={handleUpgrade}
                cityResources={cityData}
              />
            } 
          />
          <Route 
            path="/construction" 
            element={
              <Construction 
                buildingTypes={buildingTypes}
                onBuild={handleBuild}
                cityResources={{
                  budget: cityData.budget,
                  materials: cityData.materials,
                  workers: cityData.workers
                }}
              />
            } 
          />
          <Route 
            path="/resources" 
            element={
              <Resources 
                budget={cityData.budget}
                materials={cityData.materials}
                workers={cityData.workers}
              />
            } 
          />
        </Routes>
      </main>
    </div>
  );
}

export default App;
